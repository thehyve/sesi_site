<?php

/*
  .__       .__                 .__  __             .___     .___       __                        __
  |__| ____ |  |__   ___________|__|/  |_  ____   __| _/   __| _/____ _/  |______    ______ _____/  |_
  |  |/    \|  |  \_/ __ \_  __ \  \   __\/ __ \ / __ |   / __ |\__  \\   __\__  \  /  ___// __ \   __\
  |  |   |  \   Y  \  ___/|  | \/  ||  | \  ___// /_/ |  / /_/ | / __ \|  |  / __ \_\___ \\  ___/|  |
  |__|___|  /___|  /\___  >__|  |__||__|  \___  >____ |  \____ |(____  /__| (____  /____  >\___  >__|
  \/     \/     \/                    \/     \/       \/     \/          \/     \/     \/

 * 
 * This module provides functionality to inherit variables from parent datasets. 
 * It contains the following hooks:
 * 
 *   dataset_inheritance_node_insert
 *      inherit variables from parent dataset when creating a new dataset
 * 
 *   dataset_inheritance_node_update
 *      update inherited variables when changing the parent dataset
 * 
 *   dataset_inheritance_node_presave
 *      resetting the variable_inherited flag when editing a variable
 *      also associating variables and study variable attributes to the same 
 *          communities as the datasets and variables they belong to
 * 
 *   dataset_inheritance_form_alter
 *      Adds a button 'update inherited fields' to the edit dataset form. When
 *      clicked on, the dataset_inheritance_update_inherited_fields is called.
 *      Also removed the checkbox for 'variable-inherited' flag from the form view.
 * 
 *   dataset_inheritance_update_inherited_fields
 *      Callback for button added to edit dataset form.
 * 
 * The real logic for updating the inherited fields is in the following methods:
 *   _dataset_inheritance_update_inheritance
 *      Updates the inheritance, by deleting old inherited variables and adding 
 *      new ones.
 * 
 *   _dataset_inheritance_delete_inherited_variables
 *      Deletes all inherited variables for a given dataset.
 * 
 *   _dataset_inheritance_clone_variables_from_parent
 *      Adds all variables from a parent dataset to a child dataset.
 *   
 * The following helper methods are also provided:
 * 
 *   _dataset_inheritance_update_inheritance_for_updated_dataset
 *      Updates inherited fields for a dataset, if the parent has changed 
 *      compared to the database state. Is called from 
 *      dataset_inheritance_node_update hook.
 * 
 *   _dataset_inheritance_mark_variable_as_not_inherited
 *      Marks a variable as being 'not inherited', to avoid it being overwritten
 *      when updating inheritance. Is called from dataset_inheritance_node_presave
 * 
 *   _dataset_inheritance_get_parent_from_dataset
 *      Returns the parent id from a dataset.
 * 
 */

/**
 * Inherits fields from the parent dataset, if one is specified.
 * 
 * This hook is called when inserting a new dataset.
 * @global type $user
 * @param type $node
 * @return void 
 */
function dataset_inheritance_node_insert($node) {
    global $user;

    // i'm only interested in datasets
    if ($node->type != 'dataset') {
        return;
    }

    // i only want new registers
    // (if you don't put this, when you import from csv, this is triggered also)
    if (!$node->is_new) {
        return;
    }

    if (isset($_REQUEST['ignore_inheritance'])) {
        return;
    }
    
    $wrapper = entity_metadata_wrapper( 'node', $node );

    // check if has a parent field defined
    $parent_nid = _dataset_inheritance_get_parent_from_dataset( $wrapper );
    
    if( !$parent_nid ) {
        return;
    }

    $added_variable_ids = _dataset_inheritance_clone_variables_from_parent($wrapper, $parent_nid);
    $num_variables = count( $added_variable_ids );
    if ( $num_variables > 0 ) {
        drupal_set_message(t("Added @entries variables.", array('@entries' => $num_variables)), 'status');
    }
    
    // Set reference to newly added variables in dataset object
    // without resaving the node itself
    $wrapper->field_dataset_variables->set( $added_variable_ids );
    field_attach_update( 'node', $node );
    
    $search_api_index = search_api_index_load('dataset_index');
    search_api_index_items($search_api_index, -1);
    
    $var_api_index = search_api_index_load('variable_index');
    search_api_index_items($var_api_index, -1);
    
}

/**
 * This hook is called when updating a new node, and only cares about 
 * datasets
 * @param type $node
 * @return void 
 */
function dataset_inheritance_node_update($node) {
    if( $node->type == 'dataset' ) {
        $wrapper = entity_metadata_wrapper( 'node', $node );
        _dataset_inheritance_update_inheritance_for_updated_dataset( $wrapper );
    }
}

/**
 * This hook is called before saving a new node, and is used to reset
 * the variable_inherited flag
 * @param type $node
 * @return void 
 */
function dataset_inheritance_node_presave($node) {
    
    
    // Mark variable as not inherited as it has been changed
    if ($node->type == 'variable' && !$node->is_new) {        
        // Get entity wrapper
        $wrapper = entity_metadata_wrapper('node', $node);
        // Mark as not inherited
        _dataset_inheritance_mark_variable_as_not_inherited($wrapper);
    }
    
    // Associate the variables with the same og_groups as the dataset
    // that it belongs to
    if ($node->type == 'dataset') {
        // Get entity wrapper
        $dataset_wrapper = entity_metadata_wrapper('node', $node);        
        // Check if dataset has variables
        if (isset($dataset_wrapper->field_dataset_variables)) {
            // get variables
            $arr_variables = $dataset_wrapper->field_dataset_variables->value();
            // if there're some variables
            // synchronize OG permissions for each variables
            if (sizeof($arr_variables) > 0) {
                foreach ($arr_variables as $dataset_variable) {
                    // get variable wrapper
                    $variable_wrapper = entity_metadata_wrapper('node',
                            $dataset_variable);
                    // Make sure that all og_groups within the dataset are also
                    // available in the variable.
                    _dataset_inheritance_synchronize_og_groups($dataset_wrapper,
                            $variable_wrapper);
                    // Save the variable
                    $variable_wrapper->save();
                }
            }         
        }         
    }    
    
    // Associate the variable with the same og_groups as the dataset
    // that it belongs to
    if ($node->type == 'variable') {
        // Get entity wrapper
        $variable_wrapper = entity_metadata_wrapper('node', $node);                
        // Retrieve the dataset wrapper
        $dataset_node = $variable_wrapper->field_dataset->value();
        $dataset_wrapper = entity_metadata_wrapper('node', $dataset_node);

        // Make sure that all og_groups within the dataset are also
        // available in the variable.
        _dataset_inheritance_synchronize_og_groups($dataset_wrapper, $variable_wrapper);
    }
        
    // Associate the variable with the same og_groups as the dataset
    // that it belongs to
    if ($node->type == 'study_variable_attributes') {
        // Get entity wrapper
        $sva_wrapper = entity_metadata_wrapper('node', $node);                
        // Retrieve the variable
        $variable_node = $sva_wrapper->field_sva_variable->value();
        $variable_wrapper = entity_metadata_wrapper('node', $variable_node);     

        // Make sure that all og_groups within the variable are also
        // available in the study variable attributes.
        _dataset_inheritance_synchronize_og_groups($variable_wrapper, $sva_wrapper);
    }    
}

/**
 * Synchronize the og_group_ref for two nodes. The latter one will be associated 
 * with at least those groups that the former one is associated with.
 * @param entity_metadata_wrapper $wrapper_from entity_metadata_wrapper
 * @param entity_metadata_wrapper $wrapper_to 
 */
function _dataset_inheritance_synchronize_og_groups( $wrapper_from, $wrapper_to ) {
    $from_groups = $wrapper_from->og_group_ref->value();
    $to_groups = $wrapper_to->og_group_ref->value();

    foreach( $from_groups as $group ) {
        // See if this group was already selected. If not, add it
        $found = false;
        foreach( $to_groups as $group_selected ) {
            if( $group->vid == $group_selected->vid ) {
                $found = true;
                break;
            }
        }
        if( !$found ) {
            $to_groups[] = $group;
        }
    }

    // Update the og_groups ref
    $wrapper_to->og_group_ref->set( $to_groups );
}

/**
 * adds a button to dataset edit form, next to the 'parent' field to permit 
 * updating a child if the parent has changed.
 */
function dataset_inheritance_form_alter(&$form, $form_state, $form_id) {
    if ($form_id == 'dataset_node_form') {
        // only add the button if the user edits the dataset (as opposed to adding
        // a new one)
        $node = $form_state['node'];
        if (!isset($node->nid) || isset($node->is_new)) {
            return;
        }

        // Define a new button to update inherited fields
        $newbutton = array(
            '#type' => 'submit',
            '#value' => 'Update inherited fields',
            '#weight' => $form['field_dataset_parent']['#weight'] + 1,
            '#submit' => array( 'node_form_submit', 'dataset_inheritance_update_inherited_fields' )
        );

        // Insert the button in the group "Inheritance" in the form
        $form["#groups"]["group_dataset_inheritance"]->children[] = "button_update_parent";
        $form["#group_children"]["button_update_parent"] = "group_dataset_inheritance";
        $form["button_update_parent"] = $newbutton;        
        return;
    } elseif( $form_id == 'variable_node_form' ) {
        // Remove the variable-inherited flag from the form
        $form[ 'field_variable_inherited_flag' ] = array();
        
        // Add a message if the user edits a variable that has been inherited
        // only add the button if the user edits the dataset (as opposed to adding
        // a new one)
        $node = $form_state['node'];
        $wrapper = entity_metadata_wrapper('node', $node);
        if( $wrapper->field_variable_inherited_flag->value() ) {
            drupal_set_message(t("Please note that this variable has been inherited from the parent dataset. Change the field with caution", array()), 'warning');
        }
    }
}

/**
 * callback method to be executed if the user clicks 'update inherited fields' button
 */
function dataset_inheritance_update_inherited_fields($form, &$form_state) {
    // Load child dataset 
    $dataset = node_load($form_state['node']->nid);
    $dataset_wrapper = entity_metadata_wrapper( 'node', $dataset );
    
    // Retrieve parent dataset id from the form (may have changed since the
    // last save)
    $parent_nid = _dataset_inheritance_get_parent_from_dataset( $dataset_wrapper );
    
    
    if( $parent_nid ) {
        // Update inherited fields
        $num_fields = _dataset_inheritance_update_inheritance( $dataset_wrapper, $parent_nid );
        drupal_set_message(t('Inherited fields are updated.', array()));
    } else {
        // If the dataset doesn't have a parent, delete the inherited variables
        _dataset_inheritance_delete_inherited_variables($dataset_wrapper);
        drupal_set_message(t('Inherited fields have been removed.', array()));
    }
    
    //update form with current fields
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'variable')
            ->fieldCondition('field_dataset', 'nid', $dataset->nid, '=');
    $result = $query->execute();
    if (array_key_exists( 'node', $result ) && is_array( $result[ 'node' ] )) {
        $newform = array_keys($result['node']);
        $dataset_wrapper->field_dataset_variables->set( $newform );
        node_save($dataset);  
    }
    // Redirect the user
    $form_state['redirect'] = "/node/" . $dataset->nid . "/edit";
}


/**
 * Inherits fields from the parent dataset, if one is specified.
 * 
 * This hook is called when updating a new dataset. If the parent dataset
 * has not changed, no updates will be done, as it will only recreate a lot of 
 * variables.
 * @param EntityMetadataWrapper $node
 * @return void 
 */
function _dataset_inheritance_update_inheritance_for_updated_dataset($node_wrapper) {
    // Check the old node. As the changes have not been committed to the
    // database yet, we can retrieve them from the database.
    // See https://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_update/7
    $old_dataset = node_load($node_wrapper->getIdentifier());
    $old_dataset_wrapper = entity_metadata_wrapper( 'node', $old_dataset );
    
    // check if has a parent field defined, and if it has changed
    $new_parent_nid = _dataset_inheritance_get_parent_from_dataset( $node_wrapper );
    $old_parent_nid = _dataset_inheritance_get_parent_from_dataset( $old_dataset_wrapper );
    
    // Update inheritance, only if the parent dataset has changed
    if( $new_parent_nid != $old_parent_nid ) {
        $num_variables = _dataset_inheritance_update_inheritance($node_wrapper, $new_parent_nid);
        if ( $num_variables > 0 ) {
            drupal_set_message(t("Updated inherited fields: added @entries variables.", array('@entries' => $num_variables)), 'status');
        } else {
            drupal_set_message(t("Removed inherited fields."), 'status');
        }
    }
}

/**
 * Updates variables. When edited, they are marked as not inherited. 
 * This behavior ensures that inherited fields that have been changed will not
 * be overwritten if the inheritance is updated.
 * 
 * @param EntityMetadataWrapper $node_wrapper
 * @return void 
 */
function _dataset_inheritance_mark_variable_as_not_inherited($node_wrapper) {
    $node_wrapper->field_variable_inherited_flag->set(0);
}

/**
 * Updates the fields in a child dataset, based on the parent dataset.
 * The process is as follows:
 * - all variables with the flag field_variable_inherited_flag=true are deleted
 * - all variables from the parent dataset are cloned into this dataset
 *   * if a variable with the same name already exists, it is NOT overwritten
 *     because the user has most probably made changes there.
 */
function _dataset_inheritance_update_inheritance($child_dataset, $parent_dataset_id) {
    _dataset_inheritance_delete_inherited_variables($child_dataset);
    
    // Only clone variables from the parent, if one is given
    if( $parent_dataset_id ) 
        _dataset_inheritance_clone_variables_from_parent($child_dataset, $parent_dataset_id);
}

/**
 * Deletes all inherited variables from a child dataset.
 * 
 * @see _dataset_inheritance_clone_variables_from_parent
 * @param EntityMetadataWrapper $child_dataset 
 * @return int The number of variables deleted
 */
function _dataset_inheritance_delete_inherited_variables($child_dataset) {
    
    // get all variables corresponding to the child_dataset
    // that have been inherited
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'variable')
            ->fieldCondition('field_dataset', 'nid', $child_dataset->getIdentifier(), '=')
            ->fieldCondition('field_variable_inherited_flag', 'value', 1, '=');
    $result = $query->execute();

    if (array_key_exists( 'node', $result ) && is_array( $result[ 'node' ] )) {
        // Delete all nodes found 
        $inherited_variable_nids = array_keys($result['node']);
        node_delete_multiple( $inherited_variable_nids );
        
        return count($inherited_variable_nids);
    }
    
    return 0;
}

/**
 * Clones variables from the parent dataset into the child dataset. 
 * 
 * Existing variables (i.e. with the same name) are NOT overwritten
 * 
 * @param EntityMetadataWrapper $child_dataset
 * @param int $parent_dataset_id 
 * @param boolean $inherit_permissions
 * @return Number of variables cloned
 */
function _dataset_inheritance_clone_variables_from_parent($child_dataset, $parent_dataset_id) {
    //get all variables corresponding to parent_nid
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'variable')
            ->fieldCondition('field_dataset', 'nid', $parent_dataset_id, '=');

    $result = $query->execute();

    $variable_ids = array();
    
    if (isset($result['node'])) {
        // Load parent variables
        $vars_items_nids = array_keys($result['node']);
        $parent_variables = entity_load('node', $vars_items_nids);
        
        // Also load existing child variables, to make sure that fields with
        // the same name are not overwritten.
        $existing_variable_titles = array();
        $child_variables = $child_dataset->field_dataset_variables->value();
        if( is_array( $child_variables ) ) {
            foreach( $child_variables as $child_variable ) {
                if(is_null($child_variable))
                    continue;
                $existing_variable_titles[] = $child_variable->title;
            }
        }

        foreach ($parent_variables as $parent_variable) {
            $variable_node = node_load($parent_variable->nid );
            $variable_wrapper = entity_metadata_wrapper( 'node', $variable_node );
            
            // If a variable with the same name already exists, skip copying
            // this variable
            if( in_array( $variable_wrapper->title->value(), $existing_variable_titles ) ) {
                drupal_set_message(t("The variable @variable_name has been added or updated manually and will not be overwritten by the parent's version.", array( "@variable_name" => $variable_wrapper->title->value() )), 'warning', false);
                continue;
            }
            
            // Remove ids to clone the field
            unset($variable_node->nid);
            unset($variable_node->vid);
            
            // Store the new variable with the new child dataset
            $variable_wrapper->field_dataset->set( $child_dataset->getIdentifier() );
            
            // Make sure to mark this field as being inherited
            // The strange assignment is due to the way Drupal stores fields
            $variable_wrapper->field_variable_inherited_flag->set( 1 );
            
            //by default publish variable
            $variable_node->status = NODE_PUBLISHED;

            node_save($variable_node);
            
            $variable_ids[] = $variable_node->nid;
        }
    }

    return $variable_ids;
}

/**
 * Returns the ID of the parent dataset for the given child dataset
 * 
 * If no parent is specified, NULL is returned
 * @param EntityMetadataWrapper $node
 * @return int  Parent dataset ID or NULL
 */
function _dataset_inheritance_get_parent_from_dataset( $node ) {
    // Test whether the field for a dataset parent is defined. This may 
    // not be the case if the feature module has not been installed or enabled
    $parent_dataset_field = $node->field_dataset_parent;
    if (!$parent_dataset_field ) {
        return null;
    }
    
    // Test whether there is actually a parent dataset defined
    $parent = $parent_dataset_field->value();
    if (!$parent) {
        return null;
    }
    
    return intval( $parent->nid );
}
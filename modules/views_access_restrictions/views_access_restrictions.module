<?php

/**
 * Implements hook_search_api_query_alter().
 *
 * Restrict results to visible communities. This may also include results to which the user has no access but which the
 * user can only see.
 *
 * Based on search_api_search_api_query_alter
 *
 * @param SearchApiQueryInterface $query
 *   The SearchApiQueryInterface object representing the search query.
 */
function views_access_restrictions_search_api_query_alter(SearchApiQueryInterface $query) {
    // criteria:
    // 1: un-owned draft content is not visible
    // 2: content from communities to which we have access is visible
    // 3: if the community is not hidden, the content is visible

    $index = $query->getIndex();
    // Only add node access if the necessary fields are indexed in the index, and
    // unless disabled explicitly by the query.
    $fields = $index->options['fields'];
    if (!empty($fields['og_group_ref']) && !empty($fields['status']) && !empty($fields['author'])) {
        $account = $query->getOption('search_api_access_account', $GLOBALS['user']);
        if (is_numeric($account)) {
            $account = user_load($account);
        }
        if (is_object($account)) {
            try {
                if (!user_access('access content', $account)) {
                    // Simple hack for returning no results.
                    $query->condition('status', 0);
                    $query->condition('status', 1);
                    watchdog('search_api', 'User @name tried to execute a search, but cannot access content.', array('@name' => theme('username', array('account' => $account))), WATCHDOG_NOTICE);
                }

                // Only filter for user which don't have full node access.
                elseif (!user_access('bypass node access', $account)) {
                    // Filter by node "published" status.
                    if (user_access('view own unpublished content')) {
                        $filter = $query->createFilter('OR');
                        $filter->condition('status', NODE_PUBLISHED);
                        $filter->condition('author', $account->uid);
                        $query->filter($filter);
                    }
                    else {
                        $query->condition('status', NODE_PUBLISHED);
                    }

                    // Find visible communities
                    $visible_nids = _views_access_restrictions_visible_groups($account);

                    $filter = $query->createFilter('OR');
                    foreach($visible_nids as $nid) {
                        $filter->condition('og_group_ref', $nid);
                    }
                    $query->filter($filter);
                }
            }
            catch (SearchApiException $e) {
                watchdog_exception('search_api', $e);
            }
        }
        else {
            watchdog('search_api', 'An illegal user UID was given for node access: @uid.', array('@uid' => $query->getOption('search_api_access_account', $GLOBALS['user'])), WATCHDOG_WARNING);
        }
    }
}


function _views_access_restrictions_visible_groups($user) {
    $member_groups = og_get_entity_groups('user', $user->uid);
    $member_groups = array_values($member_groups['node']);

    $visible_groups = db_query("
        SELECT n.nid FROM {node} as n, {field_data_field_project_visibility} as fpv
        WHERE n.type = 'community'
            AND fpv.field_project_visibility_value = 1
            AND fpv.entity_id = n.nid")->fetchCol();

    return array_unique(array_merge($member_groups, $visible_groups));
}


<?php
module_load_include('inc', 'query_vocabularies', 'query_ontologies.taxonomy_tree');

/**
 * Registers urls specific for new query interface 
 * Implements hook_menu().
 */
function query_vocabularies_menu() {
    $items = array();
    
    // This URL is used to retrieve a set of suggestions in the 
    // autocomplete when searching a variable with vocabulary
    $items['sesi/variable/%node/suggest/%'] = array(
        'title' => 'Suggest',
        'access callback' => '_mica_datasets_node_access',
        'access arguments' => array(2, 'variable', 'view'),
        'page callback' => 'query_vocabularies_suggest_terms', 
        'page arguments' => array(2, 4),
        'delivery callback' => 'drupal_json_output',
    );
    
    return $items;
}

/**
 * Returns a set of suggestions for a specific variable
 * when the user searches in the autocomplete box
 */
function query_vocabularies_suggest_terms( $variable_node, $term ) {
    $vocabulary = _query_vocabularies_get_vocabulary( $variable_node );
    $lcTerm = strtolower( $term );
    
    $filteredVocabulary = array();
    $numTerms = 0;
    $maxTerms = 30;
    
    foreach( $vocabulary as $code => $description ) {
        if( strpos( strtolower( $description ), $lcTerm ) !== false ) {
            $filteredVocabulary[ $code ] = $description;
            $numTerms++;
        }
        
        if( $numTerms >= $maxTerms )
            break;
    }
    
    return $filteredVocabulary;
}

/**
 * Retrieves the vocabulary for a given variable node.
 * 
 * This method first checks the cache, if the data is locally available.
 * If not, the data is fetched from the URL
 * 
 * @param type $variable_node 
 */
function _query_vocabularies_get_vocabulary( $variable_node ) {
    $wrapper = entity_metadata_wrapper( 'node', $variable_node );
    $url = $wrapper->field_vocabulary_url->value();

    // Store the data based on the URL, as the data will change if the URL changes
    $cache_key = "variable-vocabulary-" . $url;
    
    // First check cache if it exists
    if( $cacheHit = cache_get( $cache_key ) ) {
        return $cacheHit->data;
    }
    
    // If not, retrieve the data from the URL
    $vocabulary = _query_vocabularies_parse_vocabulary( $url );
    
    // Only store the data in cache if some results are found. This prevents
    // storing something in cache while the remote server was down.
    if( count( $vocabulary ) > 0  )
        cache_set( $cache_key, $vocabulary );  
    
    return $vocabulary;
}

function _query_vocabularies_parse_vocabulary( $url ) {
    // Without URL, don't do anything
    if( !$url ) {
        return array();
    }
    
    // Retrieve contents
    $response = drupal_http_request( $url );
    
    // On invalid response, return nothing, but only log
    if( !$response || $response->code != 200 ) {
        watchdog('query_vocabularies', 'Unable to retrieve vocabulary for variable ' . $wrapper->label() . ' on URL ' . $url . ': Code ' . $response->code , array(), WATCHDOG_WARNING);
        return array();
    }
    
    // Split response in lines
    $lines = preg_split('/[\n\r]+/',  $response->data );
    
    // Disregard the header line
    array_shift( $lines );
    
    // Convert the other lines into an associative array
    $vocabulary = array();
    foreach( $lines as $line ) {
        if( !$line || trim( $line ) == "" )
            continue;
        
        $cells = str_getcsv( $line, "," );
        
        $vocabulary[ $cells[0] ] = $cells[1];
    }
    
    return $vocabulary;
}